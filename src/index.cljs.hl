(page "index.html"
      (:require
        [clojure.string :as string]
        [tiples.client :as tiples]
        [tiples.login :as login]
        [welcome.client]
        [profile.client]
        [contacts.client]
        [simpleArk.uuid :as suuid]
        [simpleArk.miMap :as miMap]
        ))

(def uuid5 (cljs.reader/read-string "#uuid \"9ced7028-3599-573c-90ef-9590f243b9b3\""))
(.log js/console (suuid/index-uuid? uuid5))
(.log js/console (suuid/random-uuid? uuid5))
(def uuid1 (cljs.reader/read-string "#uuid \"06bed480-a44f-11e6-b8f1-7e3698d3ae53\""))
(.log js/console (suuid/journal-entry-uuid? uuid1))
(.log js/console (suuid/random-uuid? uuid1))
(.log js/console (suuid/get-time uuid1))
(.log js/console (pr-str (miMap/create-map {[:a] 1 [:b] 2})))

(defn opening
      []
      (reset! login/started true))

(tiples/on-open opening)

(tiples/start!)

(html
  (head
    (link :href "main.css" :rel "stylesheet"))
  (body
    (div
      :css {:display "none"}
      :toggle login/show-app?
      (table (tr
               (for-tpl [capability login/capability-names]
                        (td (if-tpl (cell= (= capability login/reroute))
                                    (strong capability)
                                    (a :href (cell= (str "/#" capability)) capability))
                            " | "))
               (td (form
                     :submit #(login/logout!)
                     (button :type "submit" "log off")))))
      (div (for-tpl [capability login/capabilities]
                    (div
                      :css {:display "none"}
                      :toggle (cell= (= login/reroute (name capability)))
                      (login/add-element @capability)))))

    (login/login-div)))

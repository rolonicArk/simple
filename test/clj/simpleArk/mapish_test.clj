(ns simpleArk.mapish-test
  (:require [clojure.test :refer :all]
            [simpleArk.mapish :as mapish]
            [simpleArk.vecish :as vecish]))

(set! *warn-on-reflection* true)

(def sm0 (sorted-map (vecish/->Vecish [:a]) 1
                     (vecish/->Vecish [:b]) 2
                     (vecish/->Vecish [:e]) 10
                     (vecish/->Vecish [:f]) 11))
(def mi0 (mapish/->MI-map sm0 nil nil nil nil))
(def mi1 (mapish/->MI-map sm0 >= (vecish/->Vecish [:b]) <= (vecish/->Vecish [:e])))
(def mi2 (mapish/->MI-map sm0 > (vecish/->Vecish [:a]) < (vecish/->Vecish [:f])))

(deftest mapish
  (println sm0)
  (println mi0)
  (println (mapish/mi-seq mi0))
  (println (mapish/mi-seq mi1))
  (println (mapish/mi-seq mi2))
  (println (mapish/mi-seq (mapish/mi-assoc mi0 (vecish/->Vecish [:c]) 3)))
  (println (mapish/mi-seq (mapish/mi-assoc mi1 (vecish/->Vecish [:c]) 3)))
  (println (mapish/mi-seq (mapish/mi-assoc mi0 (vecish/->Vecish [:a]) 1)))
  (println (mapish/mi-seq (mapish/mi-assoc mi0 (vecish/->Vecish [:a]) 11)))
  (println (mapish/mi-rseq mi0))
  (println (mapish/mi-rseq mi1))
  (println (mapish/mi-rseq mi2))
  (println (mapish/mi-get mi0 (vecish/->Vecish [:a])))
  (println (mapish/mi-get mi1 (vecish/->Vecish [:a])))
  (println (mapish/mi-get mi2 (vecish/->Vecish [:a])))
  (println (mapish/mi-get mi0 (vecish/->Vecish [:b])))
  (println (mapish/mi-get mi1 (vecish/->Vecish [:b])))
  (println (mapish/mi-get mi2 (vecish/->Vecish [:b])))
  (println (mapish/mi-get mi0 (vecish/->Vecish [:c])))
  (println (mapish/mi-get mi0 (vecish/->Vecish [:e])))
  (println (mapish/mi-get mi1 (vecish/->Vecish [:e])))
  (println (mapish/mi-get mi2 (vecish/->Vecish [:e])))
  (println (mapish/mi-get mi0 (vecish/->Vecish [:f])))
  (println (mapish/mi-get mi1 (vecish/->Vecish [:f])))
  (println (mapish/mi-get mi2 (vecish/->Vecish [:f])))
  (println (mapish/mi-get mi0 (vecish/->Vecish [:a]) 22))
  (println (mapish/mi-get mi0 (vecish/->Vecish [:c]) 22))
  (println (mapish/mi-seq (mapish/mi-sub mi0 nil nil nil nil)))
  (println (mapish/mi-seq (mapish/mi-sub mi1 nil nil nil nil)))
  (println (mapish/mi-seq (mapish/mi-sub mi0 >= (vecish/->Vecish [:a]) <= (vecish/->Vecish [:f]))))
  (println (mapish/mi-seq (mapish/mi-sub mi0 > (vecish/->Vecish [:a]) < (vecish/->Vecish [:f]))))
  (println (mapish/mi-seq (mapish/mi-sub mi0 >= (vecish/->Vecish [:b]) <= (vecish/->Vecish [:e]))))
  (println (mapish/mi-seq (mapish/mi-sub mi0 > (vecish/->Vecish [:b]) < (vecish/->Vecish [:e]))))
  (println (mapish/mi-seq (mapish/mi-sub mi1 >= (vecish/->Vecish [:a]) <= (vecish/->Vecish [:f]))))
  (println (mapish/mi-seq (mapish/mi-sub mi1 > (vecish/->Vecish [:a]) < (vecish/->Vecish [:f]))))
  (println (mapish/mi-seq (mapish/mi-sub mi1 >= (vecish/->Vecish [:b]) <= (vecish/->Vecish [:e]))))
  (println (mapish/mi-seq (mapish/mi-sub mi1 > (vecish/->Vecish [:b]) < (vecish/->Vecish [:e]))))
  (println (mapish/mi-seq (mapish/mi-sub mi2 >= (vecish/->Vecish [:a]) <= (vecish/->Vecish [:f]))))
  (println (mapish/mi-seq (mapish/mi-sub mi2 > (vecish/->Vecish [:a]) < (vecish/->Vecish [:f]))))
  (println (mapish/mi-seq (mapish/mi-sub mi2 >= (vecish/->Vecish [:b]) <= (vecish/->Vecish [:e]))))
  (println (mapish/mi-seq (mapish/mi-sub mi2 > (vecish/->Vecish [:b]) < (vecish/->Vecish [:e]))))
  )
